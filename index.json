[{"content":"Why do rule IDs matter? Each rule added to a ModSecurity instance must have a unique ID (in recent versions of modsec). As a result of this it is important that IDs be generated in a preplanned way such that they don't overlap with other rules. This becomes particularly important when it comes to rulesets, like OWASP CRS. Because CRS can be used with other rule sets (in fact it is designed to be used with the Trustwave commercial rules, for instance) it is important that no two rulesets have overlapping ID ranges. To aid in this process the project maintains a list of reserved ID spaces. If you are planning on publishing rules or a ruleset please reach out to security[ at ]modsecurity.org and we can reserve a range of IDs for you thank you.\nID Reservations  1-99,999; reserved for local (internal) use. Use as you see fit but do not use this range for rules that are distributed to others. 100,000–199,999; reserved for rules published by Oracle. 200,000–299,999; reserved for rules published Comodo. 300,000-399,999; reserved for rules published at gotroot.com. 400,000–419,999; unused (available for reservation). 420,000-429,999; reserved for ScallyWhack . 430,000–439,999: reserved for rules published by Flameeyes 440,000-599,999; unused (available for reservation). 600,000-699,999; reserved for use by Akamai http://www.akamai.com/html/solutions/waf.html 700,000-799,999; reserved for Ivan Ristic. 900,000-999,999; reserved for the OWASP ModSecurity Core Rule Set project. 1,000,000-1,009,999; reserved for rules published by Redhat Security Team 1,010,000-1,999,999; unused (available for reservation) 2,000,000-2,999,999; reserved for rules from Trustwave's SpiderLabs Research team 3,000,000-3,999,999; reserved for use by Akamai 4,000,000-4,099,999; reserved in use by AviNetworks 4,100,000-4,199,999; reserved in use by Fastly 4,200,000 and above; unused (available for reservation)  IDs in the OWASP CRS ID’s within the OWASP Core Rule Set (CRS) have special meaning. Rules are assigned an ID based on their location within the ruleset. As the list above notes, the OWASP Core Rule Set is assigned ID’s from 900,000 to 999,999. This means that each rule file in CRS 3.x has 1000 IDs reserved for it. Currently, this is more than enough space, however, if at some point this becomes a problem we’ll cross that bridge when we come to it. By design rules will always be separated by 10 IDs from the ID before it. The first 10 ID’s (000 010,020,030,040,050,060,070,080,090) are designated for control flow related rules, that is typically rules that will trigger a skip action (these will be at the beginning of a file or rules that pass). As a result of this structure most rule files will start with ID 9[File_ID]100. As new rules are developed they should be added at the end. If it becomes necessary to add a rule in-between existing rules this must be noted in the comments.\nMapping 3.0.0-dev(2.x) IDs to 3.0.0-rc1 IDs When we started developing CRS 3 we started with our old ModSecurity 2.x rules and used our experience to redesign the layout of the ruleset, refine rules that were failing, and add new controls that were needed. As a result of this in pre-release version of 3.x we ran into problems where rule IDs were all of the place. Not only was this confusing but it restricted the ability to do range based ID exclusions easily. As a result we re-structured the rule ID's to what we see above.\nHowever, this is problematic for people who have made exceptions based on these existing rules. For these people we provide the following table:\nSee 2.x to 3.x Rule ID Transition Table.\nYou can use the above file along with a script similar to the one below to update exclusions or rule changes:\n#!/usr/bin/env python # -*- coding: utf-8 -*- import csv import argparse import os import sys idTranslationFile = \"IdNumbering.csv\" if(not os.path.isfile(idTranslationFile)): sys.stderr.write(\"We were unable to locate the ID translation CSV (idNumbering.csv) please place this is the same directory as this script\\n\") sys.exit(1) parser = argparse.ArgumentParser(description=\"A program that takes in an exceptions file and renumbers all the ID to match OWASP CRS 3.0-rc1 numbers. Output will be directed to STDOUT and can be used to overwrite the file using '\u003e'\") parser.add_argument(\"-f\", \"--file\", required=True, action=\"store\", dest=\"fname\", help=\"the file to be renumbered\") args = parser.parse_args() if(not os.path.isfile((args.fname).encode('utf8'))): sys.stderr.write(\"We were unable to find the file you were trying to upate the ID numbers in, please check your path\\n\") sys.exit(1) fcontent = \"\" try: f = open((args.fname).encode('utf-8'), \"r\") try: fcontent = f.read() finally: f.close() except IOError: sys.stderr.write(\"There was an error opening the file you were trying to update\") if(fcontent != \"\"): # CSV File f = open(idTranslationFile, 'rt') try: reader = csv.reader(f) for row in reader: fcontent.replace(row[0], row[1]) finally: f.close() print fcontent ","description":"","tags":null,"title":"Rule IDs","uri":"/documentation/rules/ruleid/"},{"content":"Shipped with the ruleset are a number of different tools. One of these tools are the regression testing framework for OWASP CRS. For testing we use WTF (WAF Testing Framework). This framework allows us to specify HTTP requests via a YAML file. Each modification to CRS must pass the existing tests in order to be accepted. Additionally, if you are planning to add a rule, you should ensure that a test has been written. If you submit a pull request for a new rule without a test, it will not be accepted until one is provided.\n","description":"","tags":null,"title":"Testing the Rule Set","uri":"/documentation/rules/testing/"},{"content":"What’s In The Rules | REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example | Configuration Path: rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example | This file is used to add LOCAL exceptions for your site. Often in this file we would see rules that short-circuit inspection and allow certain transactions to skip through inspection. Example: SecRule REMOTE_ADDR \"@ipMatch 192.168.1.100\" \"phase:1,id:'981033',t:none,nolog,pass,ctl:ruleEngine=Off\"| | REQUEST-901-INITIALIZATION.conf | TODO | | REQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf REQUEST-903.9003-NEXTCLOUD-EXCLUSION-RULES.conf REQUEST-903.9004-DOKUWIKI-EXCLUSION-RULES.conf REQUEST-903.9005-CPANEL-EXCLUSION-RULES.conf REQUEST-903.9006-XENFORO-EXCLUSION-RULES.conf | TODO |\nREQUEST-901-INITIALIZATION.conf TODO\nREQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf REQUEST-903.9003-NEXTCLOUD-EXCLUSION-RULES.conf REQUEST-903.9004-DOKUWIKI-EXCLUSION-RULES.conf REQUEST-903.9005-CPANEL-EXCLUSION-RULES.conf REQUEST-903.9006-XENFORO-EXCLUSION-RULES.conf TODO\n| REQUEST-905-COMMON-EXCEPTIONS | Configuration Path: rules/REQUEST-905-COMMON-EXCEPTIONS.conf | | Some rules are quite prone to causing false positives in well established software, such as Apache callbacks or Google Analytics tracking cookie. This file offers rules that will allow the transactions to avoid triggering these false positives.\n| REQUEST-910-IP-REPUTATION | Configuration Path: rules/REQUEST-910-IP-REPUTATION.conf | | These rules deal with detecting traffic from IPs that have previously been involved with malicious activity, either on our local site or globally.\nREQUEST-911-METHOD-ENFORCEMENT TODO\n| REQUEST-912-DOS-PROTECTION | Configuration Path: rules/REQUEST-912-DOS-PROTECTION.conf | | The rules in this file will attempt to detect some level 7 DoS (Denial of Service) attacks against your server.\n| REQUEST-913-SCANNER-DETECTION | Configuration Path: rules/REQUEST-913-SCANNER-DETECTION.conf | | These rules are concentrated around detecting security tools and scanners.\n| REQUEST-920-PROTOCOL-ENFORCEMENT | Configuration Path: rules/REQUEST-20-PROTOCOL-ENFORCEMENT.conf | | The rules in this file center around detecting requests that either violate HTTP or represent a request that no modern browser would generate, for instance missing a user-agent.\n| REQUEST-921-PROTOCOL-ATTACK | | Configuration Path: rules/REQUEST-21-PROTOCOL-ATTACK.conf | The rules in this file focus on specific attacks against the HTTP protocol itself such as HTTP Request Smuggling and Response Splitting.\n| REQUEST-930-APPLICATION-ATTACK-LFI | | Configuration Path: rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf\n| These rules attempt to detect when a user is trying to include a file that would be local to the webserver that they should not have access to. Exploiting this type of attack can lead to the web application or server being compromised.\n| REQUEST-931-APPLICATION-ATTACK-RFI | Configuration Path: rules/REQUEST-31-APPLICATION-ATTACK-RFI.conf | | These rules attempt to detect when a user is trying to include a remote resource into the web application that will be executed. Exploiting this type of attack can lead to the web application or server being compromised.\nREQUEST-932-APPLICATION-ATTACK-RCE.conf REQUEST-933-APPLICATION-ATTACK-PHP.conf REQUEST-934-APPLICATION-ATTACK-NODEJS.conf\nTODO\nREQUEST-941-APPLICATION-ATTACK-XSS.conf TODO\n| REQUEST-942-APPLICATION-ATTACK-SQLI | Configuration Path: rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf | | Within this configuration file we provide rules that protect against SQL injection attacks. SQLi attackers occur when an attacker passes crafted control characters to parameters to an area of the application that is expecting only data. The application will then pass the control characters to the database. This will end up changing the meaning of the expected SQL query.\n| REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION | Configuration Path: rules/REQUEST-43-APPLICATION-ATTACK-SESSION-FIXATION.conf | | These rules focus around providing protection against Session Fixation attacks.\nREQUEST-944-APPLICATION-ATTACK-JAVA TODO\n| REQUEST-949-BLOCKING-EVALUATION | Configuration Path: rules/REQUEST-49-BLOCKING-EVALUATION.conf | | These rules provide the anomaly based blocking for a given request. If you are in anomaly detection mode this file must not be deleted.\n| RESPONSE-954-DATA-LEAKAGES-IIS | Configuration Path: rules/RESPONSE-954-DATA-LEAKAGES-IIS.conf | | These rules provide protection against data leakages that may occur because of Microsoft IIS\n| RESPONSE-952-DATA-LEAKAGES-JAVA | Configuration Path: rules/RESPONSE-952-DATA-LEAKAGES-JAVA.conf | | These rules provide protection against data leakages that may occur because of Java\n| RESPONSE-953-DATA-LEAKAGES-PHP | Configuration Path: rules/RESPONSE-953-DATA-LEAKAGES-PHP.conf | | These rules provide protection against data leakages that may occur because of PHP\n| RESPONSE-950-DATA-LEAKAGES | Configuration Path: rules/RESPONSE-950-DATA-LEAKAGES.conf | | These rules provide protection against data leakages that may occur genericly\n| RESPONSE-951-DATA-LEAKAGES-SQL | Configuration Path: rules/RESPONSE-951-DATA-LEAKAGES-SQL.conf | | These rules provide protection against data leakages that may occur from backend SQL servers. Often these are indicative of SQL injection issues being present.\n| RESPONSE-959-BLOCKING-EVALUATION | Configuration Path: rules/RESPONSE-959-BLOCKING-EVALUATION.conf | | These rules provide the anomaly based blocking for a given response. If you are in anomaly detection mode this file must not be deleted.\n| RESPONSE-980-CORRELATION | Configuration Path: rules/RESPONSE-980-CORRELATION.conf | | The rules in this configuration file facilitate the gathering of data about successful and unsuccessful attacks on the server.\nREQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example Configuration Path: rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example\nThis file is used to add LOCAL exceptions for your site. Often in this file we would see rules that short-circuit inspection and allow certain transactions to skip through inspection.\n","description":"","tags":null,"title":"Rules","uri":"/documentation/rules/rules/"},{"content":"The Core Rule Set can be run using a compatible WAF engine. The CRS can also be used via a number of services which feature CRS integration, such as cloud and CDN-based WAF offerings.\nCompatible WAF Engines ModSecurity ModSecurity comes in two flavours: ModSecurity v2 and ModSecurity v3 (aka libmodsecurity).\nExisting CRS Integrations: Cloud and CDN Offerings AWS WAF Microsoft Azure WAF ","description":"","tags":null,"title":"Engine and Integration Options","uri":"/documentation/deployment/engine_integration_options/"},{"content":"Getting CRS Welcome to the OWASP Core RuleSet (CRS) documentation! Follow these chapter to get CRS installed and working.\n","description":"","tags":null,"title":"Getting CRS","uri":"/documentation/deployment/"},{"content":"Making Rules The Basic Synatax A SecRule is a directive like any other understood by ModSecurity. The difference is that this directive is way more powerful in what it is capable of representing. Generally, a SecRule is made up of 4 parts:\n Variables - Instructs ModSecurity where to look (sometimes called Targets) Operators - Instructs ModSecurity when to trigger a match Transformations - Instructs ModSecurity how it should normalize variable data Actions - Instructs ModSecurity what to do if a rule matches  The structure of the rule is as follows:\nSecRule VARIABLES \"OPERATOR\" \"TRANSFORMATIONS,ACTIONS\" A very basic rule looks as follows:\nSecRule REQUEST_URI \"@streq /index.php\" \"id:1,phase:1,t:lowercase,deny\" The preceding rule will take each HTTP Request and obtain just the URI portion. From there is will transform the URI value to lowercase. Subsequently it will check to see if that transformed value is equal to exactly '/index.php'. If it is Modsecurity will deny the request, that is, it will stop processing further rules and intercept the request.\nAs can be seen from the previous explaination, one of the unique things about the SecRule directive is that each SecRule listed in your configuration is evaluated on each transaction. All the other ModSecurity directives are only evaluated at startup.\nClearly, if this was all there was to SecRules it wouldn’t be very powerful. In fact, there is a lot more. So much more that it is in fact a full fledged language. The best place to find out about all the possible capabilities is via the ModSecurity Manual. The following is just a glimpse of its capabilities:\nThere are ~105 variables in 6 different categories, some examples include:\n Request Variables - ARGS, REQUEST_HEADERS, REQUEST_COOKIES Response Variables - RESPONSE_HEADERS, RESPONSE_BODY Server Variables - REMOTE_ADDR, AUTH_TYPE Time Variables - TIME, TIME_EPOCH, TIME_HOUR Collection Variables - TX, IP, SESSION, GEO Miscellaneous Variables - HIGHEST_SEVERITY, MATCHED_VAR  There are ~36 operators in 4 different categories, some examples include:\n String Operators - rx, pm, beginsWith, contains, endsWith, streq, within Numerical Operators - eq, ge, gt, le, lt Validation Operators - validateByteRange, validateUrlEncoding, validateSchema Miscellaneous Operators - rbl, geoLookup, inspectFile, verifyCC  There are ~35 transformation functions in 6 different categories, some examples include:\n Anti-Evasion Functions - lowercase, normalisePath, removeNulls, replaceComments, compressWhitespace Decoding Functions - base64Decode, hexDecode, jsDecode, urlDecodeUni Encoding Functions - base64Encode, hexEncode Hashing Functions - sha1, md5  There are ~47 actions in 6 different categories, some examples include:\n Disruptive Actions - block, drop, deny, proxy Flow Actions - chain, skip, skipAfter Metadata Actions - phase, id, msg, severity, tag Variable Actions - capture, setvar, initcol Logging Actions - log, auditlog, nolog, sanitiseArg Miscellaneous Actions - ctl, multiMatch, exec, pause, append/prepend  While there are a lot of options available there are a few basic things to remember.\n Every SecRule must have a VARIABLE Every SecRule must have an OPERATOR, if none is listed @rx is implied. Every SecRule must have an ACTION. The only required action is id, however, several actions are implied by SecDefaultAction (default phase:2,log,auditlog,pass) Every SecRule must have an phase ACTION, this tells the rule when to fire. If no phase is included the default is phase:2. Every SecRule must have a disruptive ACTION. This is an action that describes what to do with the transaction if triggered. If no disruptive action is included the default is pass Transformations are optional but should be used to prevent your rule from being bypassed  Advanced Variable Usage Variables themselves are quite easy to access as our earlier rules have shown. There are a couple of corner cases though. Not all variables are strings. Some variables, like ARGS_GET are Collections. A collection is very similar to a dictionary in Python, it is a key value pair of information. For instance if our request URI was http://www.example.com?x=test\u0026y=test2 our collection might look like ARGS_GET = {\"x\" : \"test\", \"y\" : \"test2\"}. When we request an VARIABLE that is a collection, ModSecurity will iterate over each value in the collection, applying transformations and checking against the operator, until it finds a match. If it finds a match it will stop processing the rule and undertake any actions specified.\nSecRule ARGS_GET \"@contains test\" \"id:1,phase:1,t:lowercase,deny\" It is possible to access just an index of a collection as well. This makes addressing specific variable very easy. To do this within the VARIABLE area of a SecRule you use the ':' (colon).\nSecRule ARGS_GET:username \"@contains admin\" \"id:1,phase:1,t:lowercase,deny\" One operator is nice but what if I have to apply one operator on multiple rules, for instance I want to check GET parameters and COOKIES. ModSecurity provides a way for you to do this. You can use the '|' (pipe) to combine two VARIABLES into one rule. This pipe can be applied as many times as you want. In the example below we combine both GET and POST arguments. In fact, this is not necessary in reality as there is a built in ARGS collections that already does this.\nSecRule ARGS_GET|ARGS_POST|REQUEST_COOKIES \"@rx hello\\s\\d{1,3}\" \"id:1,phase:2,t:lowercase,deny\" If you are having a problem where one of your variables is causing false positives or you just don't want to look there you can also remove an index of a collection using the '!' (exclamation mark). This almost always used in conjunction with the pipe and an index, ModSecurity will understand that this means remove this index from the collection\nSecRule ARGS|!ARGS:password \"@rx (admin|administrator)\" \"id:1,phase:2,t:lowercase,deny\" Advanced Transformation Usage The concept of transformations is very intuitive and thanks to ModSecurity's open source nature there are quite a few to choose from. An issue arises in that the proper application of transformations often takes knowledge about how the threat you are trying to stop can manifest itself. Imagine the following example - you are trying to detect an XSS (Cross Site Scripting) attack.\nYour first attempt looks like the following:\nSecRule ARGS \"@contains \u003cscript\u003e\" \"id:1,deny,status:403\" This can be easily bypassed by using uppercase such as ?x=\u003csCript\u003ealert(1);\u003c/script\u003e. So we can apply a transformation:\nSecRule ARGS \"@contains \u003cscript\u003e\" \"id:1,deny,status:403,t:lowercase\" This too can be easily bypassed by simply appending a space ?x=\u003csCript \u003ealert(1);\u003c/script\u003e. So we need more transformations:\nSecRule ARGS \"@contains \u003cscript\u003e\" \"id:1,deny,status:403,t:lowercase,t:removeWhitespace\" In many contexts HTML entities might be interpreted and converted back to their ASCII form. That would allow us to by pass this rule with something like \u003csCript \u003ealert(1);\u003c/script\u003e.\nSecRule ARGS \"@contains \u003cscript\u003e\" \"id:1,deny,status:403,t:lowercase,t:removeWhitespace,t:htmlEntityDecode\" As you can see this type of approach can go on for a while and is why OWASP CRS is important. We put our rules out there and continuously allow people to test them. If they find an issue we fix it and the cycle continues. This attempt to blacklist malicious attacks is a constant battle, it is always encouraged that you whitelist where available. Currently if you look at CRS you'll see there are many XSS rules. Each rule may have 5 or 6 different transformations and the operators get more complex all the time.\nAdvanced Action Usage Advanced Operator Usage Most OPERATORS are self explanatory. Many operators such as the string manipulation operators take arguments. Some operators such as the libinjection @detectXSS do not. In general the semantics for most OPERATORS is quite straight forward. The exception to this rule is the default operator @rx, or regular expressions. Even if you know how to use regular expression, it is still quite easy to make a mistake in a security context. When writing a rule remember the following guidelines:\n Regexp should avoid using ^ (alternative: A) and $ (alternative: Z) symbols, which are metacharacters for start and end of a string. It is possible to bypass regex by inserting any symbol in front or after regexp. Regexp should be case-insensitive. It is possible to bypass regex using upper or lower cases in words. Modsecurity transformation commands (which are applied on string before regex pattern is applied) can also be included in tests to cover more regexps [51]. Regexp should avoid using dot “.” symbol, which means every symbol except newline (n). It is possible to bypass regex using newline injection. Number of repetitions of set or group {} should be carefully used, as one can bypass such limitation by lowering or increasing specified numbers. Best Practice from slides of Ivan Novikov [2]: Modsecurity should avoid using t:urlDecode function (t:urlDecodeUni instead). Regexp should only use plus “+” metacharacter in places where it is necessary, as it means “one or more”. Alternative metacharacter star “*”, which means “zero or more” is generally preferred. Usage of wildcards should be reasonable. rn characters can often be bypassed by either substitution, or by using newline alternative v, f and others. Wildcard b has different meanings while using wildcard in square brackets (has meaning “backspace”) and in plain regex (has meaning “word boundary”), as classified in RegexLib article [42]. Regexp should be applied to right scope of inputs: Cookies names and values, Argument names and values, Header names and values, Files argument names and content. Regular expression writers should be careful while using only whitespace character (%20) for separating tag attributes. Rule can be bypassed with newline character: i.e. %0d,%0a. Greediness of regular expressions should be considered. Highlight of this topic is well done in Chapter 9 of Jan Goyvaert’s tutorial [27]. While greediness itself does not create bypasses, bad implementation of regexp Greediness can raise False Positive rate. This can cause excessive log-file flooding, forcing vulnerable rule or even whole WAF to be switched off.  Rules for CRS All rules for CRS should include at least one regression test. To increase the chances of having your pull request accepted into the mainline more regression tests are recommended.\nIf your rule contains combination of data sources into a single regular expression for performance reasons you should document the use of the regexp-assemble command in the comments above your command. You should also include your independent sources within this util directory. Doing so increases overall maintainability.\n","description":"","tags":null,"title":"Making","uri":"/documentation/rules/creating/"},{"content":" WarningFrom version 3.0 onwards, Anomaly Scoring is the default detection mode. Traditional detection mode is discouraged.\n Within the csr-setup.conf.example you can control the following related CRS items:\n Anomaly Scoring Severity Levels Anomaly Scoring Threshold Levels (Blocking) Enable/Disable Blocking Choose the default logging actions and much more!  Anomaly Scoring Mode Within anomaly scoring mode we are implementing the concept of Collaborative Detection and Delayed Blocking. This is to say that we have changed the rules logic by decoupling the inspection/detection from the blocking functionality. The individual rules can be run so that the detection remains, however instead of applying any disruptive action at that point, the rules will contribute to a transactional anomaly score collection. In addition, each rule will also store meta-data about each rule match (such as the Rule ID, Attack Category, Matched Location and Matched Data) for later logging.\nConfiguring Anomaly Scoring Mode The default mode in CRS 3.x is Anomaly Scoring mode, you can verify this is your mode by checking that the SecDefaultAction line in the csr-setup.conf file usees the pass action:\nSecDefaultAction \"phase:2,pass,log\" In this mode, each matched rule will not block, but rather will increment anomaly scores using ModSecurity's setvar action. Here is an example of an SQL Injection CRS rule that is using setvar actions to increase both the overall anomaly score and the SQL Injection sub-category score:\nSecRule ARGS|REQUEST_COOKIES|QUERY_STRING|REQUEST_FILENAME \"@detectSQLi\" \\ \"msg:'SQL Injection Attack Detected via LibInjection',\\ id:942100,\\ rev:'1',\\ ver:'OWASP_CRS/3.0.0',\\ maturity:'1',\\ accuracy:'8',\\ phase:request,\\ block,\\ multiMatch,\\ t:none,t:utf8toUnicode,t:urlDecodeUni,t:removeNulls,t:removeComments,\\ capture,\\ logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\\ tag:'application-multi',\\ tag:'language-multi',\\ tag:'platform-multi',\\ tag:'attack-sqli',\\ tag:'OWASP_CRS/WEB_ATTACK/SQL_INJECTION',\\ tag:'WASCTC/WASC-19',\\ tag:'OWASP_TOP_10/A1',\\ tag:'OWASP_AppSensor/CIE1',\\ tag:'PCI/6.5.2',\\ setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},\\ setvar:tx.sql_injection_score=+%{tx.critical_anomaly_score},\\ setvar:'tx.msg=%{rule.msg}',setvar:tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/SQL_INJECTION-%{matched_var_name}=%{matched_var}\" Anomaly Scoring Severity Levels Each rule has a severity level specified. We have updated the rules to allow for the anomaly score collection incrementation to use macro expansion. Below is a snippet from the above rule (id:942100) where that occurs:\nsetvar:tx.anomaly_score=+%{tx.critical_anomaly_score},\\ setvar:tx.sql_injection_score=+%{tx.critical_anomaly_score},\\ This adds a variable amount, tx.critical_anomaly_score, to the current anomaly scores. The user can configure what each score represents from within the csr-setup.conf file and these scores will be propagated out for use in the rules by using macro expansion. The following is an excerpt from csr-setup.conf where that configuration is set:\n# # -=[ Anomaly Scoring Severity Levels ]=- # # These are the default scoring points for each severity level. You may # adjust these to you liking. These settings will be used in macro expansion # in the rules to increment the anomaly scores when rules match. # # These are the default Severity ratings (with anomaly scores) of the individual rules - # # - 2: Critical - Anomaly Score of 5. # Is the highest severity level possible without correlation. It is # normally generated by the web attack rules (40 level files). # - 3: Error - Anomaly Score of 4. # Is generated mostly from outbound leakage rules (50 level files). # - 4: Warning - Anomaly Score of 3. # Is generated by malicious client rules (35 level files). # - 5: Notice - Anomaly Score of 2. # Is generated by the Protocol policy and anomaly files. # setvar:tx.critical_anomaly_score=5, \\ setvar:tx.error_anomaly_score=4, \\ setvar:tx.warning_anomaly_score=3, \\ setvar:tx.notice_anomaly_score=2\" This configuration would mean that every CRS rule that has a Severity rating of “Critical” would increase the transactional anomaly score by 5 points per rule match. When we have a rule match, you can see how the anomaly scoring works from within the modsec_debug.log file:\n... Setting variable: tx.sql_injection_score=+%{tx.critical_anomaly_score} Recorded original collection variable: tx.sql_injection_score = \"0\" Resolved macro %{tx.critical_anomaly_score} to: 5 Relative change: sql_injection_score=0+5 Set variable \"tx.sql_injection_score\" to \"5\". Setting variable: tx.anomaly_score=+%{tx.critical_anomaly_score} Recorded original collection variable: tx.anomaly_score = \"0\" Resolved macro %{tx.critical_anomaly_score} to: 5 Relative change: anomaly_score=0+5 Set variable \"tx.anomaly_score\" to \"5\". ... Now that we have the capability to do anomaly scoring, the next step is to set our thresholds. This is the score value at which, if the current transactional score is above, it will be denied. We have various different anomaly scoring thresholds to set for both specific vulnerability types and generic requests/response levels. These will be evaluated in two different files. Inbound request are evaluated at the end of phase:2 in the rules/REQUEST-949-BLOCKING-EVALUATION.conf file and outbound responses are evaluated at the end of phase:4 in the rules/RESPONSE-959-BLOCKING-EVALUATION.conf file. The thresholds are configured in the csr-setup.conf file.\nSecAction \\ \"id:'900003',\\ phase:1,\\ nolog,\\ pass,\\ t:none,\\ setvar:tx.sql_injection_score_threshold=15,\\ setvar:tx.xss_score_threshold=15,\\ setvar:tx.rfi_score_threshold=5,\\ setvar:tx.lfi_score_threshold=5,\\ setvar:tx.rce_score_threshold=5,\\ setvar:tx.command_injection_score_threshold=5,\\ setvar:tx.php_injection_score_threshold=5,\\ setvar:tx.http_violation_score_threshold=5,\\ setvar:tx.trojan_score_threshold=5,\\ setvar:tx.session_fixation_score_threshold=5,\\ setvar:tx.inbound_anomaly_score_threshold=5,\\ setvar:tx.outbound_anomaly_score_threshold=4\" With these current default settings, anomaly scoring mode will act similarly to traditional mode from a blocking perspective. Since all critical level rules increase the anomaly score by 5 points, this means that even 1 critical level rule match will cause a block. If you want to adjust the anomaly score so that you have a lower chance of blocking non-malicious clients (false positives) you could raise the tx.inbound_anomaly_score_level settings to something higher like 10 or 15. This would mean that two or more critical severity rules have matched before you decide to block. Another advantage of this approach is that you could aggregate multiple lower severity rule matches and then decide to block. So, one lower severity rule match (such as missing a Request Header such as Accept) would not result in a block but if multiple anomalies are triggered then the request would be blocked.\nEnable/Disable Blocking You are probably familiar with the SecRuleEngine directive which allows you to control blocking mode (On) vs. Detection mode (DetectionOnly). With the Anomaly Scoring mode, if you want to allow blocking, you should set the SecRueEngine to On and then uncomment the following SecAction in the csr-setup.conf file. Note: this is done by default in CRS 3.x:\nSecAction \\ \"id:'900004',\\ phase:1,\\ nolog,\\ pass,\\ t:none,\\ setvar:tx.anomaly_score_blocking=on\" When this rule is enabled, The rule within the rules/REQUEST-949-BLOCKING-EVALUATION.conf and rules/RESPONSE-959-BLOCKING-EVALUATION.conf files will evaluate the anomaly scores at the end of the request/response phases and will block the request if it exceeds a given anomaly threshold. An example of such a rule is as follows:\nSecRule TX:ANOMALY_SCORE \"@ge %{tx.inbound_anomaly_score_threshold}\" \\ \"msg:'Inbound Anomaly Score Exceeded (Total Score: %{TX.ANOMALY_SCORE}, Last Matched Message: %{tx.msg}',\\ severity:CRITICAL,\\ phase:request,\\ id:949190,\\ t:none,\\ deny,\\ log,\\ tag:'application-multi',\\ tag:'language-multi',\\ tag:'platform-multi',\\ tag:'attack-generic',\\ setvar:tx.inbound_tx_msg=%{tx.msg},\\ setvar:tx.inbound_anomaly_score=%{tx.anomaly_score},\\ chain\" SecRule TX:ANOMALY_SCORE_BLOCKING \"@streq on\" chain SecRule TX:/^\\d+\\-/ \"(.*)\" Notice that there is an explicit deny within this rule. This explitly listed disruptive action will override the default action of pass (within anomaly mode)and block the transaction. If you would like a different action to occur you would set it within the two BLOCKING-EVALUATION files.\nPros and Cons of Anomaly Scoring Detection Mode Pros\n An increased confidence in blocking - since more detection rules contribute to the anomaly score, the higher the score, the more confidence you can have in blocking malicious transactions. Allows users to set a threshold that is appropriate for them - different sites may have different thresholds for blocking. Allows several low severity events to trigger alerts while individual ones are suppressed. One correlated event helps alert management. Exceptions may be handled by either increasing the overall anomaly score threshold, or by adding local custom exceptions file  Cons\n More complex for the average user. Log monitoring scripts may need to be updated for proper analysis  Traditional Detection Mode (deprecated) WarningDon’t use this mode unless you have a ver specific need. You’ve been warned.\n Traditional Detection Mode (or IDS/IPS mode) is the old default operating mode. This is the most basic operating mode where all of the rules are “self-contained”. In this mode there is no intelligence is shared between rules and each rule has no information about any previous rule matches. That is to say, in this mode, if a rule triggers, it will execute any disruptive/logging actions specified on the current rule.\nConfiguring Traditional Mode If you want to run the CRS in Traditional mode, you can do this easily by modifying the SecDefaultAction directive in the csr-setup.conf file to use a disruptive action other than the default 'pass', such as deny:\n# Default (Anomaly Mode) SecDefaultAction \"phase:2,pass,log\" # Updated To Enable Traditional Mode SecDefaultAction \"phase:2,deny,status:403,log\" Pros and Cons of Traditional Detection Mode Pros\n The functionality of this mode is much easier for a new user to understand. Better performance (lower latency/resources) as the first disruptive match will stop further processing.  Cons\n Not all rules that could have triggered will be logged, only th first Not every site has the same risk tolerance Lower severity alerts may not trigger traditional mode Single low severity alerts may not be deemed critical enough to block, but multiple lower severity alerts in aggregate could be  ","description":"","tags":null,"title":"Anomaly Scoring Mode","uri":"/documentation/configuring/anomaly/"},{"content":"OWASP CRS Metadata OWASP CRS 3.x includes several pieces of metadata within rules. Not every rule features all metadata but it is a continuing project where possible to update this information to the best possible level. If you see a rule without a piece of metadata that you think is warranted please open either an issue or a pull request.\nTags about standards We try our best to outline information about the vulnerability when each rule triggers. To that end we include metadata about where that vulnerability type can be found in various standards. These tags are currently prefixed with the standard type and will be capitalized. They will NOT start with OWASP_CRS. They consist of a the standard and then a slash to indicate the start of the data. The following standards are supported:\n WASCTC OWASP_TOP_10 PCI  Tags about paranoia level Starting with version 3 we reintroduced the paranoia level concept. For tuning purposes we wanted it to be very clear which rules are from higher paranoia levels. As a result, any rule in a paranoia level greater than 1 will have a 'paranoia-level' tag. We use a forward slash to deliminate this tag. Anything after the slash should represent the paranoia level of that rule. For instance:\ntag:'paranoia-level/2' Tags about rule classification There are two different types of tags regarding rule classification. One type of tag carries over from CRS 2.x and one type has been added to CRS 3. The CRS 3 version can be more explanatory and allows for the capability to use SecRuleRemoveByTag more easily, whereas the CRS 2 versions give information in a more succinct manner and are used for anomaly scoring purposes.\nThe CRS 2.x rule classifications are indicated by tags starting with 'OWASP_CRS'. They are delimited by the forward slash (/) and will always have three parts. The sections get more specific as you progress through the string where the third section will always be the most specific. The following are a list of all the current CRS 2.x type tags that are used in CRS.\ntag:'OWASP_CRS/WEB_ATTACK/XSS' tag:'OWASP_CRS/AUTOMATION/SECURITY_SCANNER' tag:'OWASP_CRS/WEB_ATTACK/SQL_INJECTION' tag:'OWASP_CRS/LEAKAGE/SOURCE_CODE_JAVA' tag:'OWASP_CRS/LEAKAGE/ERRORS_JAVA' tag:'OWASP_CRS/POLICY/METHOD_NOT_ALLOWED' tag:'OWASP_CRS/LEAKAGE/ERRORS_SQL' tag:'OWASP_CRS/WEB_ATTACK/SESSION_FIXATION' tag:'OWASP_CRS/WEB_ATTACK/COMMAND_INJECTION' tag:'OWASP_CRS/WEB_ATTACK/DIR_TRAVERSAL' tag:'OWASP_CRS/WEB_ATTACK/FILE_INJECTION' tag:'OWASP_CRS/LEAKAGE/INFO_DIRECTORY_LISTING' tag:'OWASP_CRS/PROTOCOL_VIOLATION/INVALID_REQ' tag:'OWASP_CRS/PROTOCOL_VIOLATION/INVALID_HREQ' tag:'OWASP_CRS/PROTOCOL_VIOLATION/EVASION' tag:'OWASP_CRS/PROTOCOL_VIOLATION/MISSING_HEADER_HOST' tag:'OWASP_CRS/PROTOCOL_VIOLATION/MISSING_HEADER_ACCEPT'\" tag:'OWASP_CRS/PROTOCOL_VIOLATION/MISSING_HEADER_UA' tag:'OWASP_CRS/PROTOCOL_VIOLATION/IP_HOST' tag:'OWASP_CRS/POLICY/SIZE_LIMIT'\" tag:'OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED' tag:'OWASP_CRS/POLICY/HEADER_RESTRICTED' tag:'OWASP_CRS/POLICY/FILES_NOT_ALLOWED' tag:'OWASP_CRS/PROTOCOL_VIOLATION/EVASION' tag:'OWASP_CRS/PROTOCOL_VIOLATION/MISSING_HEADER_ACCEPT' tag:'OWASP_CRS/POLICY/SIZE_LIMIT' tag:'OWASP_CRS/POLICY/EXT_RESTRICTED' tag:'OWASP_CRS/WEB_ATTACK/RFI' tag:'OWASP_CRS/WEB_ATTACK/REQUEST_SMUGGLING' tag:'OWASP_CRS/LEAKAGE/ERRORS_PHP' tag:'OWASP_CRS/LEAKAGE/SOURCE_CODE_PHP' tag:'OWASP_CRS/WEB_ATTACK/PHP_INJECTION' tag:'OWASP_CRS/LEAKAGE/ERRORS_IIS' The CRS 3.x type tagging is split over a series of tags:\n application language platform attack  These tags all have additional information specified after a dash (-). In some cases, particularly with attack there might be another dash that represents a more specific variant for instance attack-injection-php. In general anything after the first dash can be treated as a string. If the category is general for a given rule the tag will have the data 'multi' an example would be a vulnerability that affects many different platforms. In this case the tag would look as follows:\ntag:'platform-multi' Additional rule information Often we will generate rules based on some presentation or article. In fact, sometimes the construction of the rule is done in such a way that it might not be naively clear how the rule works. In all of these cases comments will be left above the rule in question. Items like links will not appear within tag data.\n","description":"","tags":null,"title":"Metadata","uri":"/documentation/rules/metadata/"},{"content":"Welcome to the OWASP Core RuleSet (CRS) quickstart guide. We will attempt to get you up and running with CRS as quick as possible. This guide assumes ModSecurity is already working. If you are unsure see the extended install page. Otherwise, lets jump in.\nYou’ll first need to download the ruleset. Using a browser (or equivalent) visit the following URL:\nwget https://github.com/coreruleset/coreruleset/archive/master.zip Once this is installed extract it somewhere well known on your server. Typically this will be in the webserver directory. We are demonstrating with Apache below. For information on configuring Nginx or IIS see install. Additionally, while it is a successful practice to make a new modsecurity.d folder as outlined below, it isn’t strictly necessary. The path scheme outlined is the common to RHEL based operating systems, you may have to adjust the Apache path used to match your installation.\nmkdir /etc/httpd/modsecurity.d mv coreruleset-master.zip /etc/httpd/modsecurity.d/ cd /etc/httpd/modsecurity.d unzip coreruleset-master.zip -d owasp-modsecurity-crs After extracting the rule set we have to set up the main OWASP configuration file. We provide an example configuration file as part of the package located in the main directory: csr-setup.conf.example.\n(Note: Other aspects of ModSecurity are controlled by the recommended ModSecurity configuration rules, packaged with ModSecurity)\nFor many people this will be a good enough starting point but you should take the time to look through this file before deploying it to make sure it’s right for your environment. For more information see configuration.\nOnce you have changed any settings within the configuration file, as needed, you should rename it to remove the .example portion\ncd /etc/httpd/modsecurity.d/owasp-modsecurity-crs/ mv csr-setup.conf.example csr-setup.conf Only one more step! We now have to tell our web server where our rules are. We do this by including the rule configuration files in our httpd.conf file. Again, we are demonstrating using Apache but it is similar on other systems see the install page for details.\necho 'IncludeOptional /etc/httpd/owasp-modsecurity-crs/csr-setup.conf' \u003e\u003e /etc/httpd/conf/httpd.conf echo 'IncludeOptional /etc/httpd/owasp-modsecurity-crs/rules/*.conf' \u003e\u003e /etc/httpd/conf/httpd.conf Now that we have configured everything you should be able to restart and enjoy using the OWASP Core Rule Set. Typically these rules will require a bit of exception tuning, depending on your site. For more information see exceptions. Enjoy!\nsystemctl restart httpd.service ","description":"","tags":null,"title":"OWASP CRS Quickstart","uri":"/documentation/deployment/quickstart/"},{"content":"Docker ","description":"","tags":null,"title":"Using Containers","uri":"/documentation/operation/containers/"},{"content":"","description":"","tags":null,"title":"Writing CRS Rules","uri":"/documentation/development/rule_writing/"},{"content":"Paranoia Levels ","description":"","tags":null,"title":"Paranoia Levels","uri":"/documentation/configuring/paranoia_levels/"},{"content":"CRS Plugin System ","description":"","tags":null,"title":"Plugins","uri":"/documentation/configuring/plugins/"},{"content":"Configuring OWASP CRS TODO\n","description":"","tags":null,"title":"Configuration","uri":"/documentation/configuring/crs/"},{"content":"How it Works Congratulations! You’ve installed CRS succesfully! . Now let’s dive a bit more on how to get the most from it.\n","description":"","tags":null,"title":"How it Works","uri":"/documentation/configuring/"},{"content":"If you need mode information than the one in the quickstart guide, here we extend with additional details so keep reading.\nBelow you should find all the information you need to properly install CRS. If you are having problems feel free to reach out to our Google Group, or our Slack Channel. If you don’t have access yet, get your invite here.\nPrerequisites Installing the CRS isn’t very hard but it does have one major requirement, ModSecurity. If ModSecurity isn’t working properly you will likely run into problems running the CRS.\nWarningIn order to run the CRS 3.x branch you require AT MINIMUM ModSecurity 2.8 or above, preferably version 3.x or above.\n Finding where to edit in your configuration ModSecurity comes in MANY different version with support for a multitude of Operating Systems (OS) and Web Servers. The installation locations may differ greatly between these different options so please be aware that the following are just some of the more common configurations.\nApache 2.x with ModSecurity 2.x Compiled Compiling ModSecurity is easy, but slightly outside the scope of this document. If you are interested in learning how to compile ModSecurity please go to the ModSecurity documentation. Having compiled ModSecurity there is a simple test to see if your installation is working. If you have compiled from source you would have needed to include LoadModule security2_module modules/mod_security2.so either in httpd.conf (apache2.conf on Debian) or in some file included from this file. Anywhere after you load your module you may add the following ModSecurity directives.\nSecRuleEngine On SecRule ARGS:testparam \"@contains test\" \"id:1234,deny,status:403,msg:'Our test rule has triggered'\" If you restart Apache you may now navigate to any page on your web server passing the parameter 'testparam' with the value 'test' (via post or get) and you should receive a 403. This request will typically appear similar to as follows: http://localhost/?testparam=test.\nIf you obtained a 403 status code your ModSecurity instance is functioning correctly with Apache and you now know where to place directives.\nApache 2.x with ModSecurity 2.x Packaged (RHEL) Many operating systems provide package managers in order to aid in the install of software packages and their associated dependencies. Even though ModSecurity is relatively straight forward to install, some people prefer using package managers due to their ease. It should be noted here that many package managers do not up date their releases very frequently, as a result it is quite likely that your distribution may be missing required features or possibly even have security vulnerabilities. Additionally, depending on your package/package manager your ModSecurity configuration will be laid out slightly different.\nOn Fedora we will find that when you use dnf install mod_security you will receive the base ModSecurity package. Apache’s configuration files are split out within this environment such that there are different folders for the base config (/etc/httpd/config), user configuration (/etc/httpd/conf.d, and module configuration (/etc/httpd/conf.modules.d/). The Fedora ModSecurity 2.x package places the LoadModule and associated ‘Include’s within /etc/httpd/conf.modules.d/10-mod_security.conf. Additionally, it places some of the reccomended default rules in /etc/httpd/conf.d/mod_security.conf. It is this secondary configuration file that will setup the locations where you should add your rules. By default it reads in all config files from the /etc/httpd/modsecurity.d/ and /etc/httpd/modsecurity.d/activated_rules/ folder. To keep order I would reccomend testing this configuration by placing a rules.conf file within the activated_rules folder. Within this rules.conf file add the following:\nSecRuleEngine On SecRule ARGS:testparam \"@contains test\" \"id:1234,deny,status:403,msg:'Our test rule has triggered'\" Upon saving and restarting Apache (systemctl restart httpd.service) you should be able to navigate to a your local webserver. Once this is accomplished try passing the ‘testparam’ paramater with the value ‘test’ such as via the following URL: http://localhost/?testparam=test. You should receive a 403 Forbidden status. If you do congratulations, ModSecurity is ready for the OWASP CRS rules.\nNginx with ModSecurity 2.x Compiled ModSecurity 2.x currently doesn’t support the new Nginx loadable modules. As a result, it is required that you compile Nginx from source with ModSecurity. For more information on how to do this see the ModSecurity documentaiton. Once ModSecurity is compiled in you will have to specify both ‘ModSecurityEnabled’ and ‘ModSecurityConfig’ within any location block where you want ModSecurity enabled. An example would look similar to below.\nlocation / { ModSecurityEnabled on; ModSecurityConfig modsec_includes.conf; } Within this modsec_includes.conf you may use the Include directive to include other files or any ModSecurity directives. For our testing purpose we will add the following to our modsec_includes.conf:\nSecRuleEngine On SecRule ARGS:testparam \"@contains test\" \"id:1234,deny,status:403,msg:'Our test rule has triggered'\" Upon saving and restarting Nginx (./nginx -s reload) you should be able to navigate to a your local webserver. Once this is accomplished try passing the ‘testparam’ paramater with the value ‘test’ such as via the following URL: http://localhost/?testparam=test. You should receive a 403 Forbidden status. If you do congratulations, ModSecurity is ready for the OWASP CRS rules 🚀.\nNginx with ModSecurity 3.x (libmodsecurity) Compiled Microsoft IIS with ModSecurity 2.x The most common deployment of ModSecurity for IIS is via the pre-packaged MSI installer, available at https://www.modsecurity.org/download.html. If you compiled or are looking to compile ModSecurity for IIS this documentation isn’t for you.\nIf you used this package to install ModSecurity 2.x on IIS (tested on IIS 7-10), than your configuration files are located withinC:\\Program Files\\ModSecurity IIS\\ (or Program Files(x86) depending on your configuration). The inital configuration file, that is the one that the remainder are included from, is modsecurity_iis.conf. This file will be parsed by the ModSecurity for both ModSecurity and 'Include' directives.\nBy default all installations of ModSecurity without SecRuleEngine declared will start in DetectionOnly mode. IIS, by default, explicitly declares SecRuleEngine to be DetectionOnly within the included modsecurity.conf file. As a result any rule we make will only show up in the Windows Event Viewer by default. For our example we’re going to turn on disruptive actions. To test we should add the following to the end of our modsecurity_iis.conf:\nSecRuleEngine On SecRule ARGS:testparam \"@contains test\" \"id:1234,deny,status:403,msg:'Our test rule has triggered'\" This rule will be triggered when you go to your web page and pass the testparam (via either GET or POST) with the test value. This typically will looks similar to the following: http://localhost/?testparam=test.\nIf all went well you should see an HTTP 403 Forbidden in your browser when you navigate to the site in question. Additionally, in your Event Viewer, under ‘Windows Logs’-\u003e‘Application’, we should see a new log that looks like the following:\n\u003cLog.png\u003e\nIf you have gotten to this step ModSecurity is functioning on IIS and you now know where to place new directives.\nDownloading OWASP CRS Now that you know where your rules belong typically we’ll want to download the OWASP CRS. The best place to get the latest copy of the ruleset will be from our Github. Be careful to determine if there are any more relevant branches in development that can take advantage of the version of ModSecurity you are using. You can do this by checking the different branches on the site and looking throughout this documentation. To download a repository you can either click the  Download Zip  button or your can use git clone. For instance,\ngit clone https://github.com/coreruleset/coreruleset.git Typically you’ll end up with a folder named something similar to owasp-modsecurity-crs. From here the process is surprisingly simple. Because OWASP CRS is, at its core, a set of ModSecurity configuration files (*.conf files) all you have to do is tell ModSecurity where these CRS configuration files reside and it will do MOST of the remaining work. To do this you must use the 'Include' directive. This include directive can be used in similar places to where we used our SecRule earlier. It should be noted that OWASP CRS should be included AFTER the ModSecurity configuration rules which are available via the ModSecurity repo which should have been configured during your inital installation. These rules will configure ModSecurity options, such as SecRuleEngine that we used earlier. This configuration file should be reviewed and modified as desired.\nSetup OWASP CRS OWASP CRS contains one setup file that should be reviewed prior to completing setup. The setup file is the only configuration file within the root ‘owasp-crs-modsecurity’ folder and is named csr-setup.conf.example. Going through the configuration file (csr-setup.conf.example) and reading what the different options are is HIGHLY recommended. At minimum you should keep in mind the following.\n CRS does not configure ModSecurity features such as the rule engine, the audit engine, logging etc. This task is part of the ModSecurity initial setup.If you haven’t done this yet please check out the recommended ModSecurity configuration By default SecDefaultAction CRS will redirect to your local domain when an alert is triggered. This may cause redirect loops depending on your configuration. Take some time to decide what you want ModSecurity it do (drop the packet, return a status:403, go to a custom page etc.) when it detects malicious activity. Make sure to configure your anomaly scoring thresholds for more information see Anomaly By default ModSecurity looks for lots of issues with different databases and languages, if you are running a specific environment, you probably want to limit this behaviour for performance reasons. ModSecurity supports Project Honeypot blacklists. This is a great project and all you need to do to leverage it is sign up for an API key Do make sure you have added any methods, static resources, content types, or file extensions that your site needs beyond the basic ones listed.  For more information please see the page on configuration. Once you have reviewed and configured CRS you should rename the file suffix from .example to .conf:\nmv csr-setup.conf.example csr-setup.conf In addition to csr-setup.conf.example there are two other .example files within our repository. These files are: rules/REQUEST-00-LOCAL-WHITELIST.conf.example and rules/RESPONSE-99-EXCEPTIONS.conf.example. These files are designed to provide the rule maintainer the capability to modify rules (see exceptions) without breaking forward compatability with updates. As such you should rename these two files, removing the .example suffix. This will make it so that even when updates are installed they do not overwrite your custom updates. To rename the files in Linux one would use a command similar to the following:\nmv rules/REQUEST-00-LOCAL-WHITELIST.conf.example rules/REQUEST-00-LOCAL-WHITELIST.conf mv rules/RESPONSE-99-EXCEPTIONS.conf.example rules/RESPONSE-99-EXCEPTIONS.conf Proceeding with the Install Both ModSecurity 2.x (via APR) and ModSecurity 3.x support the Include directive and what it tells the ModSecurity core to do is parse the additional files for ModSecurity directives. But where do you place this folder for it to be included? If you were to look at the CRS files, you’d note there are quite a few .conf files. While the names attempt to do a good job at describing what each file does additional information is available in the rules section.\nIncludes for Apache Apache will include from the Apache Root directory (/etc/httpd/, /etc/apache2/, or /usr/local/apache2/ depending on the envirovment). Typically we reccomend following the Fedora practice of creating a folder specificlly for ModSecurity rules. In our example we have named this modsecurity.d and placed in within the root Apache directory. When using Apache we can use the wildcard notation to vastly simplify our rules. Simply copying our cloned directory to our modsecurity.d folder and specifying the appropertie include directives will allow us to install OWASP CRS. In the example below we have also included our modsecurity.conf file which includes reccomended configurations for ModSecurity\n\u003cIfModule security2_module\u003e Include modsecurity.d/modsecurity.conf Include modsecurity.d/owasp-modsecurity-crs/csr-setup.conf Include modsecurity.d/owsp-modsecurity-crs/rules/*.conf \u003c/IfModule\u003e Includes for Nginx Nginx will include from the Nginx conf directory (/usr/local/nginx/conf/ depending on the envirovment). Because only one ModSecurityConfig directive can be specified within nginx.conf we reccomend naming that file modsec_includes.conf and including additional files from there. In the example below we copied our cloned owasp-modsecurity-crs folder into our Nginx configuration directory. From there we specifying the appropertie include directives which will include OWASP CRS when the server is restarted. In the example below we have also included our modsecurity.conf file which includes reccomended configurations for ModSecurity\ninclude modsecurity.conf include owasp-modsecurity-crs/csr-setup.conf include owasp-modsecurity-crs/rules/REQUEST-00-LOCAL-WHITELIST.conf include owasp-modsecurity-crs/rules/REQUEST-01-COMMON-EXCEPTIONS.conf include owasp-modsecurity-crs/rules/REQUEST-10-IP-REPUTATION.conf include owasp-modsecurity-crs/rules/REQUEST-11-METHOD-ENFORCEMENT.conf include owasp-modsecurity-crs/rules/REQUEST-12-DOS-PROTECTION.conf include owasp-modsecurity-crs/rules/REQUEST-13-SCANNER-DETECTION.conf include owasp-modsecurity-crs/rules/REQUEST-20-PROTOCOL-ENFORCEMENT.conf include owasp-modsecurity-crs/rules/REQUEST-21-PROTOCOL-ATTACK.conf include owasp-modsecurity-crs/rules/REQUEST-30-APPLICATION-ATTACK-LFI.conf include owasp-modsecurity-crs/rules/REQUEST-31-APPLICATION-ATTACK-RFI.conf include owasp-modsecurity-crs/rules/REQUEST-32-APPLICATION-ATTACK-RCE.conf include owasp-modsecurity-crs/rules/REQUEST-33-APPLICATION-ATTACK-PHP.conf include owasp-modsecurity-crs/rules/REQUEST-41-APPLICATION-ATTACK-XSS.conf include owasp-modsecurity-crs/rules/REQUEST-42-APPLICATION-ATTACK-SQLI.conf include owasp-modsecurity-crs/rules/REQUEST-43-APPLICATION-ATTACK-SESSION-FIXATION.conf include owasp-modsecurity-crs/rules/REQUEST-49-BLOCKING-EVALUATION.conf include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-IIS.conf include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-JAVA.conf include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-PHP.conf include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES.conf include owasp-modsecurity-crs/rules/RESPONSE-51-DATA-LEAKAGES-SQL.conf include owasp-modsecurity-crs/rules/RESPONSE-59-BLOCKING-EVALUATION.conf include owasp-modsecurity-crs/rules/RESPONSE-80-CORRELATION.conf include owasp-modsecurity-crs/rules/RESPONSE-99-EXCEPTIONS.conf Setting up automated updated todo: The OWASP Core Rule Set is designed with the capability to be frequently updated in mind. New threats and techniques and updates are provided frequently as part of the rule set and as a result, in order to combat the latest threats effectivly it is imperative that constant updates should be part of your strategy.\nAn update script As part of our continuing effort to provide the most user friendly rule set available we provide an example script that you can use for updating your ruleset:\n# -*- coding: utf-8 -*- \"\"\" This script is designed to allow users to automatically update their ModSecurity OWASP Core Rule Set. It can be called by a cronjob or scheduled task in order to allow for automation. Note that it can either replace the whole CRS directory or just update the rules folder, which is the default. \"\"\" from __future__ import print_function import argparse import os import uuid import shutil import logging try: from git import Repo except ImportError: print(\"This script requires the GitPython module (pip install gitpython).\") __author__ = \"Chaim Sanders\" __copyright__ = \"Copyright 2016, Trustwave Inc\" __credits__ = [\"Chaim Sanders\"] __license__ = \"ASL 2.0\" __version__ = \"1.0\" __maintainer__ = \"Chaim Sanders\" __git__ = \"csanders-git\" __status__ = \"Production\" def check_arguments(logger): \"\"\"Control arguments and set args variable\"\"\" example_string = \"Examples: python %(prog)s--full -p ./owasp-modsecurity-crs/\" \\ \" or python %(prog)s--folder=util/ --path=./owasp-modsecurity-crs/util\" \\ \" or python %(prog)s\" parser = argparse.ArgumentParser(description='Update OWASP CRS rules', formatter_class=argparse.ArgumentDefaultsHelpFormatter, epilog=example_string) parser.add_argument('-b', '--branch', default=\"v3.0.0-rc1\", type=str, required=False, help='The GitHub branch you want to download.') parser.add_argument('-r', '--repo', default=\"https://github.com/SpiderLabs/owasp-modsecurity-crs\", type=str, required=False, help='The GitHub repository you want to use.') parser.add_argument('-p', '--path', default=\"./owasp-modsecurity-crs/rules/\", type=str, required=False, help='The path where the rules files should be placed') group = parser.add_mutually_exclusive_group(required=False) group.add_argument('--full', action='store_true', required=False, help='Copy the whole repo to the path specified instead of just the rules') group.add_argument('--folder', default=\"rules/\", type=str, required=False, help='The toplevel folder within the repo to copy. Can\\'t be used with full') parser.add_argument('-d', '--debug', action='store_true', required=False, help='Display debug logging.') args = parser.parse_args() if args.debug: logger.setLevel(logging.DEBUG) logger.debug(\"Debugging mode has been enabled.\") logger.debug(\"The following arguments were assigned: \" + str(args) + \".\") return args def download_rules(args, logger): \"\"\"Download and replace our rules\"\"\" if args.path[-1] != os.path.sep: dst_dir = args.path + os.path.sep else: dst_dir = args.path logger.debug(\"The final path was set to \" + str(dst_dir) + \".\") rand_fold = \"./\" + str(uuid.uuid4()) logger.debug(\"The temporary repo folder was set to \" + str(rand_fold) + \".\") # If the user wants the whole directory set that otherwise just rules/ if args.full: copy_fold = rand_fold else: copy_fold = rand_fold + os.path.sep + args.folder logger.debug(\"Set the folder to be copied to \" + copy_fold + \".\") Repo.clone_from(args.repo, rand_fold, branch=(args.branch)) logger.debug(\"Cloned the repo successfully.\") for src_dir, _, files in os.walk(copy_fold): for file_ in files: if file_[-8:] != \".example\": src_file = os.path.join(src_dir, file_) # If its the full copy we need the new prefix path if args.full: copy_path = src_file.replace(rand_fold, \"\")[1:] else: # Remove the overlap in folders copy_path = src_file.replace(os.path.join(rand_fold, args.folder), \"\") dst_file = os.path.join(dst_dir, copy_path) cwd = os.path.dirname(dst_file) # Check if the directory structure exists if not os.path.exists(cwd): os.makedirs(cwd) if os.path.exists(dst_file): os.remove(dst_file) logger.debug(\"Removed existing \" + dst_file + \".\") try: shutil.move(src_file, cwd) except shutil.Error as exc: print(exc) logger.debug(\"Moved \" + file_ + \" to \" + cwd + \".\") logger.debug(\"Copying completed successfully\") shutil.rmtree(rand_fold) logger.debug(\"Deleted the temporary folder.\") def main(): \"\"\"Initiate logging and run subroutines\"\"\" logging.basicConfig(level=logging.INFO) logger = logging.getLogger(os.path.basename(__file__)) args = check_arguments(logger) download_rules(args, logger) if __name__ == \"__main__\": main() Problems with installation Apache Line Continuation In Apache 2.4.x before 2.4.11 there is a bug where the use of line continuations in a config size may cause the line continuation to be truncated. This will lead to an error similar to the following:\nSyntax error on line 24 of /etc/httpd/modsecurity.d/activated_rules/RESPONSE-50-DATA-LEAKAGES-PHP.conf: Error parsing actions: Unknown action: \\ This is not an error with ModSecurity or OWASP CRS. In order to fix this issue you can simply add a space before the continuation on the offending line. For more information see apache bugzilla.\nAnomaly Mode Doesn’t Work Sometimes on IIS or Nginx users run into an instance where anamoly mode doesn’t work as expected. In fact upon careful inspection of logs one would notice that rules don’t fire in the order we would expect. In general this is a result of using the '*' operator within these environments as it does not act the same way as in Apache. In general within both Apache and IIS one should expliticly include the various files present within the OWASP CRS instead of using the '*'.\nWebserver returns error after CRS install This is likley due to a rule triggering. For instance in some cases a rule is enabled that prohibits access via an IP address. Depending on your SecDefaultAction and SecRuleEngine configurations, this may result in a redirect loop or a status code. If this is the problem you are experiencing you should consult your error.log (or event viewer for IIS). From this location you can determine the offending rule and add an exception if neccessary see exceptions.\n","description":"","tags":null,"title":"Installing CoreRuleSet","uri":"/documentation/deployment/install/"},{"content":"","description":"","tags":null,"title":"Log Handling","uri":"/documentation/operation/log_handling/"},{"content":"","description":"","tags":null,"title":"Writing Plugins","uri":"/documentation/development/plugin_writing/"},{"content":"Operation ","description":"","tags":null,"title":"Operation","uri":"/documentation/operation/"},{"content":"Modifying Rules OWASP Core Rule Set (CRS) as a rule set for ModSecurity has no context into what your web application is doing and how it is designed. As a result, often legitimate requests might seem to CRS to be attacks. This term is often called a False Positive. While the CRS team does its best to prevent these from happening, they are somewhat inevitable due to the blacklist nature of the rules. A quick example might illustrate the problem better.\nImagine you are running the popular Wordpress CMS engine. As part of this engine the capability exists to add both HTML (and JavaScript if you're an administrator) to your blog posts. Now Wordpress has rules around which tags can be used and their whitelist of tags has generally been studied pretty heavily by the security community. However, ModSecurity will only has visibility akin to www.mywordpressblog.com?wp_post=\u003ch1\u003eWelcome+To+My+Blog\u003c/h1\u003e. In this instance OWASP CRS sees HTML Injection, because that is what’s there. ModSecurity will have no knowledge that this problem is mitigated server side and as a result may block the request. It is therefore necessary sometimes to add an exception.\nThe most common issues when adding exceptions to OWASP CRS is that if done ‘inline’ it will be clobbered by the next update. The ModSecurity team has developed sophisticated methods for dealing with this problem that are quite versatile.\nExceptions versus Whitelist There are two generally different methods for modifying rules. Exceptions, which will remove or modify the rule from startup time and whitelist modifications which can modify a rule based on the content of a transaction. In general whitelist rules are slightly more powerful but also more expensive as they must be evaluated every time a transaction comes in.\nWithin CRS 3.x two files are provided to help you add these different rule modifications, they are: rules/REQUEST-00-LOCAL-WHITELIST.conf.example and rules/RESPONSE-99-EXCEPTIONS.conf.example. As is noted in the install documentation, the .example extension is provided specifically so that when these files are renamed, future updates will not overwrite these files. Before adding a whitelist or exception modification you should rename these files to end in the .conf exception.\nThe naming of these files is also not an accident. Due to the transactional nature of the whitelist modifications, they need to take place BEFORE the rules they are affecting, since they are processed on every transaction. Conversely, the exceptions file contains directives that are evaluated on startup. As a result, these need to be some of the last rules included in your configuration such that data structures that store the rules are populated and it can modify them.\nWriting Exceptions Exceptions come in a few different forms which are all outlined in detail within the Reference Manual. The following directives can be used to modify a rule at startup without touching the actual rule:\n SecRuleRemoveById SecRuleRemoveByMsg SecRuleRemoveByTag SecRuleUpdateActionById SecRuleUpdateTargetById SecRuleUpdateTargetByMsg SecRuleUpdateTargetByTag  You’ll notice that there are two types of exceptions, those that remove, and those that change (or update) rules. General usage of the SecRuleRemove* rules is fairly straight forward:\nSecRule ARGS \"@detectXSS\" \"id:123,deny,status:403\" SecRuleRemoveById 123 The above rule will remove rule 123. When ModSecurity starts up it will add rule 123 into its internal data structures and when it processes SecRuleRemoveById it will then remove it from it’s internal data structures. The rule will not be processed for any transaction as by the time ModSecurity reaches the point where it’s processing requests, the rule simply no longer exists.\nThe SecRuleUpdate* modifications are a bit more complicated. They have the capability to update a target or action based on some identifier. The update target rule is perhaps the simpler of the two to use. Modifying Targets (Variables) is easy, you can either append or replace. To append you simply only list one argument after SecRuleUpdateTargetBy*. This is great for adding exceptions as you can restrict a certain index of a collection from being inspected\nSecRule ARGS \"@detectXSS\" \"id:123,deny,status:403\" SecRuleUpdateTargetById 123 !ARGS:wp_post It is also possible to replace a target (variable). To do this you must first list the variable you want to replace with, followed by the variable you want to replace. So in the below example we replace the ARGS variable with ARGS_POST.\nSecRule ARGS \"@detectXSS\" \"id:123,deny,status:403\" SecRuleUpdateTargetById 123 ARGS_POST ARGS Updating an action becomes a little more tricky as there are default actions and actions types of which only one can exist per rule. In general, transformations and actions that are not already included will be appended. There is one big exception to this rule and that is disruptive actions (pass, deny, etc) will always replace each other, there may only ever be one disruptive action. Additionally, certain logging actions will replace each other, for instance nolog would overwrite the log action. This functionality has the same rules as using SecDefaultAction.\nSecRule \"@detectXSS\" attack \"phase:2,id:12345,t:lowercase,log,pass,msg:'Message text'\" SecRuleUpdateActionById 12345 \"t:none,t:compressWhitespace,deny,status:403,msg:'New message text'\" # Results in the following rule SecRule ARGS \"@detectXSS \"phase:2,id:12345,t:lowercase,t:none,t:compressWhitespace,log,deny,status:403,msg:'New Message text'\" In general updating a rule to remove just the false positive is preferred over removing the entire rule. It should be noted that both actions should be taken with care as they do open a potential security hole. Before you add an exception within any rules you should make sure that the area where you are adding the exception is indeed a false positive and not vulnerable to the issue.\nYou may notice that it is not possible to change the operator of the rule via these exception Directives. To change the functionality of a rule you must use whitelist modifications OR remove the rule and add a new one.\nWriting Whitelist Modifications Whitelisting is more complicated than exceptions because the rules can be more varied. In some ways they are less powerful than exceptions, but in others they are far more powerful. Whitelist rules use the ctl action to change the state of the engine on a per transaction basis. This can be as simple as turning off the ruleEngine when a certain IP hits. Note, the ruleEngine will return to state from the configuration file for the next transaction.\nSecRule REMOTE_ADDR \"@IPMatch 1.2.3.4\" \"id:1,ctl:ruleEngine=Off\" You can also use this rule to avoid certain rules in some cases, this effectively allows you to modify operators. In the following example we have a rule that will block the entire 129.21.x.x subnet (class B). We add a ctl modification before hand such that if we get a particular IP address in that range we remove the rule, effectively adding an exception\nSecRule REMOTE_ADDR \"@IPMatch 129.21.3.17\" \"id:3,ctl:ruleRemoveById=4\" SecRule REMOTE_ADDR \"@IPMatch 129.21.0.0/24\" \"id:4,deny,status:403\" The ctl action can also change the configuration of certain directives which can lead to more efficient rules. It is recommended that you investigate its full potential.\nTuning CRS CRS 3.x is designed to make it easy to remove rules that are not relevant to your configuration. Not only are Rules organized into files that are titled with general categories but we have also renumbered according to a scheme such that rule IDs can be used to quickly remove entire unwanted configurations files by using SecRuleRemoveById. The following example removes all XSS rules which are located in the REQUEST-941-APPLICATION-ATTACK-XSS.conf file. Notice that all OWASP CRS rules are prefixed with ‘9’ and then the next two digits represent the rules file.\nSecRuleRemoveById \"941000-941999\" The CRS rules also features tags to identify what their functionality is. It is therefore easy to remove an entire category that doesn't apply to your environment. In the following example we remove all IIS rules using SecRuleRemoveByTag.\nSecRuleRemoveByTag \"platform-iis\" ","description":"","tags":null,"title":"Adding Exceptions and Tuning CRS","uri":"/documentation/configuring/exceptions/"},{"content":"Chapter 3 The Rules ","description":"","tags":null,"title":"Creating Rules","uri":"/documentation/rules/"},{"content":"Top Level Heading ","description":"","tags":null,"title":"Using the CRS Sandbox","uri":"/documentation/development/sandbox/"},{"content":"Chapter 4 Creating new rules ","description":"","tags":null,"title":"Development","uri":"/documentation/development/"},{"content":"Additional Resources Free and Open-Source Community Help  Core Rule Set GitHub repository. Open issues for bugs, report false positives, and access the source code. Core Rule Set Slack channel. Come and talk to the CRS community. If you don’t have access yet, get your invite here. ModSecurity Users Mailing List (SourceForge): General discussion about ModSecurity. ModSecurity Developers Mailing List (SourceForge): Development discussion about ModSecurity.  Commercial Help  Commercial Support through Trustwave's Technical Assistance Center (TAC) - https://www3.trustwave.com/modsecurity-rules-support.php Professional Services offer by Trustwave SpiderLabs Research Team ModSecurity Training  Books about ModSecurity  ModSecurity Handbook  ModSecurity Handbook is “The definitive guide to the popular open source web application firewall”, by Christian Folini and Ivan Ristić. The book is available from Feisty Duck in hard copy or with immediate access to the digital version which is continually updated.   Web Application Defender’s Cookbook: Battling Hackers and Defending Users  The Web Application Defender’s Cookbook: Battling Hackers and Protecting Users is a book written by previous ModSecurity Project Lead and OWASP ModSecurity Project Lead Ryan Barnett. The book outlines critical defensive techniques to protect web applications and includes example ModSecurity rules/scripts.   ModSecurity 2.5  ModSecurity 2.5 is “A complete guide to using ModSecurity”, written by Magnus Mischel. The book is available from Packt Publishing in both hard copy and digital forms.*   Apache Security  Apache Security is a comprehensive Apache Security resource, written by Ivan Ristic for O’Reilly. Two chapters (Apache Installation and Configuration and PHP) are available as free download, as are the Apache security tools created for the book.   Preventing Web Attacks with Apache  Preventing Web Attacks with Apache. Building on his groundbreaking SANS presentations on Apache security, Ryan C. Barnett reveals why your Web servers represent such a compelling target, how significant exploits are performed, and how they can be defended against.    ","description":"","tags":null,"title":"Additional Resources","uri":"/documentation/resources/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/documentation/categories/"},{"content":"Core Rule Set Project The OWASP Core Rule Set provides guidelines for many of the aspects surrounding the project. Please explore some of these below.\nIf you are looking to submit a security issue with the Core Rule Set please email security [ at ] coreruleset.org.\nCore Rule Set Documentation What is the Core Rule Set? The OWASP® (Open Web Application Security Project) CRS (Core Rule Set) is an open source collection of rules that work with ModSecurity® and compatible web application firewalls (WAFs). These rules are designed to provide easy to use, generic attack detection capabilities, with a minimum of false positives (false alerts), to your web application as part of a well balanced defence-in-depth solution.\nContribution Guidelines If you are looking for information about how to join our vibrant community of Core Rule Set developers, we invite you to check out our GitHub repository. When you’re ready to contribute, we’ve outlined some of the guidelines that we use to keep our project managed.\nChange Policy The Core Rule Set project endeavors not to make breaking changes in minor releases (i.e. 3.1.1). Instead, these releases will fix bugs otherwise identified in the previous release. New functionality and breaking changes will be made in major releases (i.e. 3.3).\nIf you are interested in seeing what has changed in recent versions of the software please see our CHANGES file.\nLicence The OWASP Core Rule Set is a free and open-source set of security rules using the Apache License 2.0. Although it was originally developed for ModSecurity’s SecRules language, the rule set can be, and often has been, freely modified, reproduced, and adapted for various commercial and non-commercial endeavors. We encourage individuals and organizations to commit back to the OWASP Core Rule Set where possible.\nDocumentation Source The source files for this documentation can be found at our documentation repository on GitHub.\nThis documentation has been statically generated with Hugo with a simple command : hugo. The Hugo Relearn Theme is also used, the source code for which is available here at GitHub.\n","description":"","tags":null,"title":"OWASP Core Rule Set Documentation","uri":"/documentation/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/documentation/tags/"}]